%%% -*- coding: latin-1 -*-

%%% The  contents of this  file are  subject to  the Erlang  Public License,
%%% Version  1.1, (the  "License");  you may  not  use this  file except  in
%%% compliance  with the License.  You should  have received  a copy  of the
%%% Erlang  Public License  along  with this  software.  If not,  it can  be
%%% retrieved at http://plc.inf.elte.hu/erlang/
%%%
%%% Software  distributed under  the License  is distributed  on an  "AS IS"
%%% basis, WITHOUT  WARRANTY OF ANY  KIND, either expressed or  implied. See
%%% the License  for the specific language governing  rights and limitations
%%% under the License.
%%%
%%% The Original Code is RefactorErl.
%%%
%%% The Initial Developer of the  Original Code is Eötvös Loránd University.
%%% Portions created  by Eötvös  Loránd University are  Copyright 2009,
%%% Eötvös Loránd University. All Rights Reserved.

-module(refcore_erl_scanner).
-vsn("$Rev: 3877 $").

-export([create/0, init/1]).

-include("core.hrl").

%% @spec create() -> //referl_gen/refgen_scanner:fold_scanner()
%% @doc Erlang scanner factory function. The initial state of the returned
%% scanner should be constructed using {@link init/1}.
create() ->
    ?Scanner:new([{table, table()},
                  {callback, fun token/2}]).

%% @spec init( (atom(), string(), {Start, End}) -> term() ) -> state()
%%       Start = //referl_gen/refgen_scanner:pos()
%%       End   = //referl_gen/refgen_scanner:pos()
%% @doc Erlang scanner initial state. The state contains `Token', the token
%% builder function. The scanner will return the list of tokens build using
%% `Token'.
init(Token) ->
    {start(), Token, []}.

token({eof, _}, {_, _, Lst}) ->
    lists:reverse(Lst);
token({Type, Text, Pos}, {St, T, Lst}) ->
    RealType = keyword(St, Type, Text),
    {next(St, RealType), T, [T(RealType, Text, Pos) | Lst]}.
