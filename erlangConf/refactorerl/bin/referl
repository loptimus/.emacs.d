#!/bin/bash

# Unix shell script that starts RefactorErl. The same command line can be used
# on all platforms to start the server.

help_exit(){
        cat <<HELP >&2
Usage: $0 [Option]...
Starts RefactorErl, by default using the current working directory as data directory.

Recognised options:
  -base PATH          Path to the RefactorErl base directory
  -browser_root       Set the file browser root directory
  -build TARGET       Build TARGET (e.g. tool, doc, clean)
  -client             Start in client mode (no server is started)
  -db [mnesia|nif]    The database engine to use (default: mnesia)
  -dir DIR            Sets the RefactorErl data directory
  -emacs              Start as an Emacs client
  -erl PATH           Path to the Erlang executable to use
  -g++ PATH           Path of the g++ compiler to use
  -help               Print this help text
  -images_dir         Set root directory where generated Nitrogen images will be written
  -name NAME          Full name of the Erlang node
  -nitrogen           Start with Nitrogen
  -no_cpp             CPP code will not be compiled (use with '-build tool')
  -restricted_mode    Set restricted mode on the web interface 
  -server             Start in server mode (no shell is started)
  -sname NAME         Short name of the Erlang node
  -srvname NAME       Name of the Erlang server node to connect
  -yaws_189           Prepare for the Yaws 1.89 to use during compilation (use with '-build tool')
  -yaws               Start with Yaws web server
  -yaws_listen IP     Set Yaws IP
  -yaws_name NAME     Set Yaws server name
  -yaws_path PATH     Path to the Yaws ebin directory (need /ebin at the end)
  -yaws_port PORT     Set Yaws port
HELP
        exit
#  -wrangler PATH   Path to a Wrangler installation
}

# Set defaults
ERL=erl
BASE=`pwd`
SERVER=yes
CLIENT=no
CPP_COMPILER="g++"
NAME_TYPE=-sname
NAME=refactorerl@localhost
SRVNAME=refactorerl@127.0.0.1
YNAME=referl
YPATH=no_path
YPORT=8001
YLISTEN=0.0.0.0
BROWSER_ROOT=no_path
RESTRICTED_MODE=false
IMGDIR=`pwd`
YAWS189="false"
MNESIA=""
DBMOD="-dbmod refdb_mnesia"
DBARGS="-dbargs []"
COMPILE_CPP="true"

# If $REFERL_DIR is set, we use it as the base directory of Mnesia.
# Also, RefactorErl will save all other files in this directory.
# If $REFERL_DIR is not set, the system uses `pwd` as default.
# This can be overridden by the -dir option.
if [ ! $REFERL_DIR ]; then
    REFERL_DIR="`pwd`/data"
fi

# Interpret arguments
while [ $# -gt 0 ]
do
    if [ "$1" = -erl ]
    then
        ERL="$2"
        shift 2
    elif [ "$1" = -base ]
    then
        BASE="$2"
        shift 2
    elif [ "$1" = -name ] || [ "$1" = -sname ]
    then
        NAME_TYPE="$1"
        NAME="$2"
        shift 2
    elif [ "$1" = -srvname ]
    then
        SRVNAME="$2"
        shift 2
    elif [ "$1" = -server ]
    then
        SERVER=yes
        CLIENT=server
        shift
    elif [ "$1" = -emacs ]
    then
        CLIENT=emacs
        shift
    elif [ "$1" = -nitrogen ]
    then
        CLIENT=nitrogen
        shift
    elif [ "$1" = -browser_root ]
    then
        BROWSER_ROOT="$2"
        shift 2
    elif [ "$1" = -images_dir ]
    then
        IMGDIR="$2"
        shift 2
    elif [ "$1" = -restricted_mode ]
    then
        RESTRICTED_MODE="true"
        shift
    elif [ "$1" = -yaws ]
    then
        CLIENT=yaws
        shift
    elif [ "$1" = -yaws_path ]
    then
        YPATH="$2"
        shift 2
    elif [ "$1" = -yaws_name ]
    then
        YNAME="$2"
        shift 2
    elif [ "$1" = -yaws_port ]
    then
        YPORT="$2"
        shift 2
    elif [ "$1" = -yaws_listen ]
    then
        YLISTEN="$2"
        shift 2
    elif [ "$1" = -g++ ]
    then
        CPP_COMPILER="$2"
        shift 2
    elif [ "$1" = -build ]
    then
        CLIENT=build
        SERVER=no
        NAME=build
        TARGET="$2"
        shift 2
    elif [ "$1" = -no_cpp ]
    then
        COMPILE_CPP="false"
        shift 1
    elif [ "$1" = -yaws_189 ]
    then
        YAWS189="true"
        shift 1
    elif [ "$1" = -client ]
    then
        SERVER=no
        shift
    elif [ "$1" = -wrangler ]
    then
        WRANGLER="$2"
        shift 2
    elif [ "$1" = -help ]
    then
        help_exit
    elif [ "$1" = -db ]
    then
        if [ "$2" = mnesia ]
        then
            DBMOD="-dbmod refdb_mnesia"
            DBARGS="-dbargs []"
        elif [ "$2" = nif ]
        then
            DBMOD="-dbmod refdb_nif"
            DBARGS="-dbargs []"
        else
            echo >&2
            echo "[WARNING] Unsupported database mode: '$2'. Default database will be used." >&2
            echo >&2
        fi
        shift 2
    elif [ "$1" = -dbmod ]
    then
        DBMOD="-dbmod $2"
        shift 2
    elif [ "$1" = -dir ]
    then
        REFERL_DIR="$2"
        shift 2
    elif [ "$1" = -dbargs ]
    then
        DBARGS="-dbargs $2"
        shift 2
    else
        echo "error: unknown argument: '$1'!" >&2
        echo >&2
        help_exit
    fi
done

# Makes the directory that will store all data that pertains to RefactorErl.
mkdir -p $REFERL_DIR


# Set extra arguments
[ $CLIENT = server ] && ARGS="-noinput"
[ $CLIENT = emacs ]  && ARGS="-noshell -s referl_emacs start $SRVNAME"
[ $CLIENT = yaws ]  && ARGS="-noshell -run web_helper start_yaws from_script
 $YPATH $YNAME $YPORT $YLISTEN"
[ $CLIENT = nitrogen ]  && ARGS="-noshell -run nitrogen_helper start_nitrogen from_script
 $YPATH $YNAME $YPORT $YLISTEN $BROWSER_ROOT $IMGDIR $RESTRICTED_MODE"
[ $CLIENT = build ]  && ARGS="-noshell -run referl_gen_build start $TARGET"


# The following feature appeared in R12B-2:
export ERL_LIBS="$BASE/lib"

# Other possibility, which only works in Unix:
# -pa "$BASE/lib"/*/ebin

rm -f "${BASE}metricmode.dat"

export COMPILE_CPP
export CPP_COMPILER
export YAWS189

MNESIA="-mnesia dir '$REFERL_DIR'"

if [ $SERVER = yes ]
then
    "$ERL" \
        -smp \
        $NAME_TYPE  "$NAME" \
        -config "$BASE/sys.config" \
        -boot   "$BASE/refactorerl" \
        -s reflib_ui_router set_ref_node $NAME \
        ${WRANGLER:+-pa} ${WRANGLER:+"$WRANGLER"} \
        +W "w" \
        +K true \
        $MNESIA \
        $DBMOD $DBARGS \
        $ARGS
elif [ $CLIENT = build ]
then
    "$ERL" -make

    "$ERL" \
        $NAME_TYPE  "$NAME" \
        $ARGS
else
    "$ERL" \
        $NAME_TYPE  "$NAME" \
        -s reflib_ui_router set_ref_node $SRVNAME \
        $ARGS
fi
